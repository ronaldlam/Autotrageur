import base64
import os

from cryptography.fernet import Fernet
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt


# Length used for the random salt.
SALT_LEN = 32


def get_fernet(key):
    """Get Fernet object generated from the key.

    Args:
        key (bytes): The base64 encoded key in bytes.

    Returns:
        Fernet: The object used for the symmetric encryption.
    """
    return Fernet(key)


def get_scrypt(salt, pi_mode=False):
    """Get Scrypt object generated by the given salt.

    Args:
        salt (bytes): The salt to add to the password.
        pi_mode (bool): Whether to run Scrypt with memory limitations to
            accommodate raspberry pi.  Default is False.

    Returns:
        Scrypt: The object used for hashing the keys using scrypt.
    """
    return Scrypt(
        salt=salt,
        length=32,
        n=2**14 if pi_mode else 2**20,
        r=8,
        p=1,
        backend=default_backend())


def encrypt(plaintext, password, pi_mode=False):
    """Return encrypted data.  Uses a 32-byte random salt.

    Args:
        plaintext (bytes): The data to encrypt.
        password (bytes): The password to encrypt data with.
        pi_mode (bool): Whether to run Scrypt with memory limitations to
            accommodate raspberry pi.  Default is False.

    Returns:
        bytes: Encrypted data with salt appended.
    """
    salt = os.urandom(SALT_LEN)
    kdf = get_scrypt(salt, pi_mode)
    key = base64.urlsafe_b64encode(kdf.derive(password))
    f = get_fernet(key)
    return f.encrypt(plaintext) + salt


def decrypt(ciphertext, password, pi_mode=False):
    """Return decrypted data.

    Args:
        ciphertext (bytes): The encrypted data, with appended 32-byte salt.
        password (bytes): The password to encrypt data with.
        pi_mode (bool): Whether to run Scrypt with memory limitations to
            accommodate raspberry pi.  Default is False.

    Returns:
        bytes: The plaintext data.
    """
    if pi_mode:
        print("PI MODE ON")
    kdf = get_scrypt(ciphertext[-SALT_LEN:], pi_mode)
    key = base64.urlsafe_b64encode(kdf.derive(password))
    f = get_fernet(key)
    return f.decrypt(ciphertext)
